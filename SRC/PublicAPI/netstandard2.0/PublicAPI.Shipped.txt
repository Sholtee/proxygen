#nullable enable
abstract Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.GetConcreteGenerator() -> Solti.Utils.Proxy.Internals.Generator!
Solti.Utils.Proxy.Attributes.EmbedGeneratedTypeAttribute
Solti.Utils.Proxy.Attributes.EmbedGeneratedTypeAttribute.EmbedGeneratedTypeAttribute(System.Type! generator) -> void
Solti.Utils.Proxy.Attributes.EmbedGeneratedTypeAttribute.Generator.get -> System.Type!
Solti.Utils.Proxy.Generators.DuckGenerator
Solti.Utils.Proxy.Generators.DuckGenerator.DuckGenerator(System.Type! iface, System.Type! target) -> void
Solti.Utils.Proxy.Generators.DuckGenerator.Interface.get -> System.Type!
Solti.Utils.Proxy.Generators.DuckGenerator.Target.get -> System.Type!
Solti.Utils.Proxy.Generators.DuckGenerator<TInterface, TTarget>
Solti.Utils.Proxy.Generators.DuckGenerator<TInterface, TTarget>.DuckGenerator() -> void
Solti.Utils.Proxy.Generators.ProxyGenerator
Solti.Utils.Proxy.Generators.ProxyGenerator.Interceptor.get -> System.Type!
Solti.Utils.Proxy.Generators.ProxyGenerator.Interface.get -> System.Type!
Solti.Utils.Proxy.Generators.ProxyGenerator.ProxyGenerator(System.Type! iface, System.Type! interceptor) -> void
Solti.Utils.Proxy.Generators.ProxyGenerator<TInterface, TInterceptor>
Solti.Utils.Proxy.Generators.ProxyGenerator<TInterface, TInterceptor>.ProxyGenerator() -> void
Solti.Utils.Proxy.InterfaceInterceptor<TInterface>
Solti.Utils.Proxy.InterfaceInterceptor<TInterface>.InterfaceInterceptor(TInterface? target) -> void
Solti.Utils.Proxy.InterfaceInterceptor<TInterface>.Proxy.set -> void
Solti.Utils.Proxy.InterfaceInterceptor<TInterface>.Target.get -> TInterface?
Solti.Utils.Proxy.Internals.DuckBase<T>
Solti.Utils.Proxy.Internals.DuckBase<T>.DuckBase(T target) -> void
Solti.Utils.Proxy.Internals.DuckBase<T>.Target.get -> T
Solti.Utils.Proxy.Internals.GeneratedClass
Solti.Utils.Proxy.Internals.GeneratedClass.GeneratedClass() -> void
Solti.Utils.Proxy.Internals.Generator
Solti.Utils.Proxy.Internals.Generator.Activate(object? tuple) -> object!
Solti.Utils.Proxy.Internals.Generator.ActivateAsync(object? tuple, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
Solti.Utils.Proxy.Internals.Generator.GetGeneratedType() -> System.Type!
Solti.Utils.Proxy.Internals.Generator.GetGeneratedTypeAsync(System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Type!>!
Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>
Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.Generator() -> void
Solti.Utils.Proxy.Internals.TypeEmitter
Solti.Utils.Proxy.InvocationContext
Solti.Utils.Proxy.InvocationContext.Args.get -> object?[]!
Solti.Utils.Proxy.InvocationContext.InvocationContext(object?[]! args, Solti.Utils.Proxy.MethodContext! methodContext) -> void
Solti.Utils.Proxy.InvocationContext.InvocationContext(object?[]! args, System.Func<object!, object?[]!, object?>! dispatch) -> void
Solti.Utils.Proxy.IProxyAccess<TInterface>
Solti.Utils.Proxy.IProxyAccess<TInterface>.Proxy.set -> void
Solti.Utils.Proxy.MethodContext
Solti.Utils.Proxy.MethodContext.Dispatch.get -> System.Func<object!, object?[]!, object?>!
Solti.Utils.Proxy.MethodContext.Member.get -> System.Reflection.MemberInfo!
Solti.Utils.Proxy.MethodContext.Method.get -> System.Reflection.MethodInfo!
Solti.Utils.Proxy.MethodContext.MethodContext(Solti.Utils.Proxy.MethodContext! src) -> void
Solti.Utils.Proxy.MethodContext.MethodContext(System.Func<object!, object?[]!, object?>! dispatch) -> void
static Solti.Utils.Proxy.Internals.GeneratedClass.RegisterInstance(System.Type! instance) -> void
static Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.Activate(object? tuple) -> TInterface
static Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.ActivateAsync(object? tuple, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TInterface>!
static Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.GetGeneratedType() -> System.Type!
static Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.GetGeneratedTypeAsync(System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Type!>!
static Solti.Utils.Proxy.Internals.Generator<TInterface, TDescendant>.Instance.get -> Solti.Utils.Proxy.Internals.Generator!
virtual Solti.Utils.Proxy.InterfaceInterceptor<TInterface>.Invoke(Solti.Utils.Proxy.InvocationContext! context) -> object?