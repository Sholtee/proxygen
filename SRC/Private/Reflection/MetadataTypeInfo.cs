/********************************************************************************
* MetadataTypeInfo.cs                                                           *
*                                                                               *
* Author: Denes Solti                                                           *
********************************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection;

namespace Solti.Utils.Proxy.Internals
{
    internal class MetadataTypeInfo(Type underlyingType) : ITypeInfo
    {
        protected Type UnderlyingType { get; } = underlyingType;

        public static ITypeInfo CreateFrom(Type underlyingType)
        {
            while (underlyingType.IsByRef)
            {
                underlyingType = underlyingType.GetElementType();
            }

            if (underlyingType.IsFunctionPointer())
                underlyingType = typeof(IntPtr);

            return underlyingType switch
            {
                _ when underlyingType.IsArray => new MetadataArrayTypeInfo(underlyingType),
                _ when underlyingType.GetOwnGenericArguments().Any() => new MetadataGenericTypeInfo(underlyingType),
                _ => new MetadataTypeInfo(underlyingType)
            };
        }

        public override bool Equals(object obj) => obj is MetadataTypeInfo that && UnderlyingType.Equals(that.UnderlyingType);

        public override int GetHashCode() => UnderlyingType.GetHashCode();

        public override string ToString() => UnderlyingType.ToString();

        private IAssemblyInfo? FDeclaringAssembly;
        public IAssemblyInfo DeclaringAssembly => FDeclaringAssembly ??= MetadataAssemblyInfo.CreateFrom(UnderlyingType.Assembly);

        public bool IsVoid => UnderlyingType == typeof(void);

        private readonly Lazy<ITypeInfo?> FEnclosingType = new(() =>
        {
            Type? enclosingType = underlyingType.GetEnclosingType();

            return enclosingType is not null
                ? CreateFrom(enclosingType)
                : null;
        });
        public ITypeInfo? EnclosingType => FEnclosingType.Value;

        private IReadOnlyList<ITypeInfo>? FInterfaces;
        public IReadOnlyList<ITypeInfo> Interfaces => FInterfaces ??= UnderlyingType
            .GetAllInterfaces()
            .Select(CreateFrom)
            .ToImmutableList();

        private ITypeInfo? FBaseType;
        public ITypeInfo? BaseType => UnderlyingType.GetBaseType() is not null
            ? FBaseType ??= CreateFrom(UnderlyingType.GetBaseType()!)
            : null;

        public virtual string Name => UnderlyingType.GetFriendlyName();

        public RefType RefType => UnderlyingType.GetRefType();

        private readonly Lazy<ITypeInfo?> FElementType = new(() =>
        {
            Type? realType = underlyingType.GetElementType();

            return realType is not null
                ? CreateFrom(realType)
                : null;
        }) ;
        public ITypeInfo? ElementType => FElementType.Value;

        //
        // In case of "Cica<T>.Mica<TT>", "TT" is embedded which is inappropriate to us
        //

        public bool IsNested => UnderlyingType.IsNested() && !IsGenericParameter;

        public bool IsInterface => UnderlyingType.IsInterface;

        private IReadOnlyList<IPropertyInfo>? FProperties;
        public IReadOnlyList<IPropertyInfo> Properties => FProperties ??= UnderlyingType
            .ListProperties(includeStatic: true)
            .Select(MetadataPropertyInfo.CreateFrom)
            .ToImmutableList();

        private IReadOnlyList<IEventInfo>? FEvents;
        public IReadOnlyList<IEventInfo> Events => FEvents ??= UnderlyingType
            .ListEvents(includeStatic: true)
            .Select(MetadataEventInfo.CreateFrom)
            .ToImmutableList();

        //
        // These methods are generated by the compiler
        //

        private static bool ShouldSkip(MethodInfo m) =>
            (m.DeclaringType.IsClass && m.Name == "Finalize") || // destructor
            (m.DeclaringType.IsArray && m.Name == "Get") || // = array[i]
            (m.DeclaringType.IsArray && m.Name == "Set") ||  // array[i] =
            (m.DeclaringType.IsArray && m.Name == "Address") || // = ref array[i]
            (typeof(Delegate).IsAssignableFrom(m.DeclaringType) && m.Name == "Invoke") // delegate.Invoke(...)
#if DEBUG
            //
            // https://github.com/OpenCover/opencover/blob/master/main/OpenCover.Profiler/CodeCoverage_Cuckoo.cpp
            //

            || new string[] { "SafeVisited", "VisitedCritical" }.IndexOf(m.Name) >= 0
#endif
        ;

        private IReadOnlyList<IMethodInfo>? FMethods;
        public IReadOnlyList<IMethodInfo> Methods => FMethods ??= UnderlyingType
            .ListMethods(includeStatic: true)
            .Where(meth => !ShouldSkip(meth))
            .Select(MetadataMethodInfo.CreateFrom)
            .ToImmutableList();

        private IReadOnlyList<IConstructorInfo>? FConstructors;
        public IReadOnlyList<IConstructorInfo> Constructors => FConstructors ??= UnderlyingType
                .GetDeclaredConstructors()
                .Select(static ctor => (IConstructorInfo) MetadataMethodInfo.CreateFrom(ctor))
                .ToImmutableList();

        public string? AssemblyQualifiedName => QualifiedName is not null //  (UnderlyingType.IsGenericType ? UnderlyingType.GetGenericTypeDefinition() : UnderlyingType).AssemblyQualifiedName;
            ? $"{QualifiedName}, {UnderlyingType.Assembly}"
            : null;

        public bool IsGenericParameter => (UnderlyingType.GetInnermostElementType() ?? UnderlyingType).IsGenericParameter;

        public string? QualifiedName => UnderlyingType.GetQualifiedName();

        public bool IsClass => UnderlyingType.IsClass();

        public bool IsFinal => UnderlyingType.IsSealed;

        public bool IsAbstract => UnderlyingType.IsAbstract();

        private readonly Lazy<IHasName?> FContainingMember = new(() =>
        {
            Type concreteType = underlyingType.GetInnermostElementType() ?? underlyingType;

            return concreteType switch
            {
                _ when concreteType.IsGenericParameter && concreteType.DeclaringMethod is not null => MetadataMethodInfo.CreateFrom(concreteType.DeclaringMethod),
                _ when concreteType.GetEnclosingType() is not null => MetadataTypeInfo.CreateFrom(concreteType.GetEnclosingType()!),
                _ => null
            };
        });
        public IHasName? ContainingMember => FContainingMember.Value;

        public AccessModifiers AccessModifiers => UnderlyingType.GetAccessModifiers();

        private sealed class MetadataGenericTypeInfo : MetadataTypeInfo, IGenericTypeInfo
        {
            public MetadataGenericTypeInfo(Type underlyingType) : base(underlyingType) { }

            public bool IsGenericDefinition => UnderlyingType
                .GetGenericArguments()
                .Any(static ga => ga.IsGenericParameter);

            private IReadOnlyList<ITypeInfo>? FGenericArguments;
            public IReadOnlyList<ITypeInfo> GenericArguments => FGenericArguments ??= UnderlyingType
                .GetOwnGenericArguments()
                .Select(CreateFrom)
                .ToImmutableList();

            public override string Name => !UnderlyingType.IsGenericType || UnderlyingType.IsGenericTypeDefinition // FIXME: Type.GetFriendlyName() doesn't handle closed generics
                ? base.Name
                : GenericDefinition.Name;

            public IGenericTypeInfo GenericDefinition => new MetadataGenericTypeInfo(UnderlyingType.GetGenericTypeDefinition());

            public IReadOnlyList<IGenericConstraint> GenericConstraints => throw new NotImplementedException();

            public IGenericTypeInfo Close(params ITypeInfo[] genericArgs)
            {
                if (UnderlyingType.IsNested)
                    throw new NotImplementedException(); // TODO

                Type[] gas = new Type[genericArgs.Length];

                for (int i = 0; i < genericArgs.Length; i++)
                {
                    gas[i] = genericArgs[i].ToMetadata();
                }

                return (IGenericTypeInfo) CreateFrom(UnderlyingType.MakeGenericType(gas));
            }
        }

        private sealed class MetadataArrayTypeInfo : MetadataTypeInfo, IArrayTypeInfo 
        {
            public MetadataArrayTypeInfo(Type underlyingType) : base(underlyingType) { }

            public int Rank => UnderlyingType.GetArrayRank();
        }
    }
}
