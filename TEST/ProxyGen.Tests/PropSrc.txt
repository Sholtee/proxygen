System.Int32 Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>.Prop
{
    get
    {
        this.InvokeTarget = () => this.Target.Prop;
        System.Reflection.PropertyInfo prop = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolvePropertyGet(() => this.Target.Prop);
        return (System.Int32)this.Invoke(prop.GetMethod, new System.Object[0], prop);
    }

    set
    {
        this.InvokeTarget = () =>
        {
            this.Target.Prop = value;
            return null;
        }

        ;
        System.Reflection.PropertyInfo prop = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolvePropertySet(() => this.Target.Prop = value);
        this.Invoke(prop.SetMethod, new System.Object[]{value}, prop);
    }
}