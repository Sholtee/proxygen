internal sealed class GeneratedProxy : Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTests.FooInterceptor, Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>
{
    public GeneratedProxy(Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32> target): base(target)
    {
    }

    System.Int32 Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>.Foo<TT>(System.Int32 a, out System.String b, ref TT c)
    {
        System.Object[] args = new System.Object[]{a, default(System.String), c};
        this.InvokeTarget = () =>
        {
            System.Int32 cb_a = (System.Int32)args[0];
            System.String cb_b;
            TT cb_c = (TT)args[2];
            System.Object result;
            result = this.Target.Foo<TT>(cb_a, out cb_b, ref cb_c);
            args[1] = (System.Object)cb_b;
            args[2] = (System.Object)cb_c;
            return result;
        };
        System.Reflection.MethodInfo method = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveMethod(this.InvokeTarget);
        System.Object result = this.Invoke(method, args, method);
        b = (System.String)args[1];
        c = (TT)args[2];
        return (System.Int32)result;
    }

    void Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>.Bar()
    {
        System.Object[] args = new System.Object[0];
        this.InvokeTarget = () =>
        {
            System.Object result;
            result = null;
            this.Target.Bar();
            return result;
        };
        System.Reflection.MethodInfo method = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveMethod(this.InvokeTarget);
        this.Invoke(method, args, method);
    }

    System.Int32 Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>.Prop
    {
        get
        {
            System.Object[] args = new System.Object[0];
            this.InvokeTarget = () =>
            {
                System.Object result;
                result = this.Target.Prop;
                return result;
            };
            System.Reflection.PropertyInfo prop = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveProperty(this.InvokeTarget);
            return (System.Int32)this.Invoke(prop.GetMethod, args, prop);
        }

        set
        {
            System.Object[] args = new System.Object[]{value};
            this.InvokeTarget = () =>
            {
                System.Int32 cb_value = (System.Int32)args[0];
                System.Object result;
                this.Target.Prop = cb_value;
                result = null;
                return result;
            };
            System.Reflection.PropertyInfo prop = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveProperty(this.InvokeTarget);
            this.Invoke(prop.SetMethod, args, prop);
        }
    }

    event Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.TestDelegate<System.Int32> Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>.Event
    {
        add
        {
            System.Object[] args = new System.Object[]{value};
            this.InvokeTarget = () =>
            {
                Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.TestDelegate<System.Int32> cb_value = (Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.TestDelegate<System.Int32>)args[0];
                System.Object result;
                this.Target.Event += cb_value;
                result = null;
                return result;
            };
            System.Reflection.EventInfo evt = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveEvent(this.InvokeTarget);
            this.Invoke(evt.AddMethod, args, evt);
        }

        remove
        {
            System.Object[] args = new System.Object[]{value};
            this.InvokeTarget = () =>
            {
                Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.TestDelegate<System.Int32> cb_value = (Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.TestDelegate<System.Int32>)args[0];
                System.Object result;
                this.Target.Event -= cb_value;
                result = null;
                return result;
            };
            System.Reflection.EventInfo evt = Solti.Utils.Proxy.InterfaceInterceptor<Solti.Utils.Proxy.SyntaxFactories.Tests.ProxySyntaxFactoryTestsBase.IFoo<System.Int32>>.ResolveEvent(this.InvokeTarget);
            this.Invoke(evt.RemoveMethod, args, evt);
        }
    }
}